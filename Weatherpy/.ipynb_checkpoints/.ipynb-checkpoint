{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EF\n"
     ]
    }
   ],
   "source": [
    "print('EF')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from citipy import citipy\n",
    "import datetime\n",
    "import pandas as pd\n",
    "from scipy import stats\n",
    "import json\n",
    "import requests\n",
    "import random\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "API_KEY = \"fa87ebc6ce0f0896f3d12c6bcab56d4f\"\n",
    "longitude_min = -180\n",
    "longitude_max = 180\n",
    "# lattitude: 180 total degrees. requirements: min 500 cities. \n",
    "# Look at a world map with lattitude lines, it is clear to see that nothing besides Antarctica, which is unhinhabited,\n",
    "# resides below -60 degrees lattitude. I gave similar consideration to the area in the world above the 80 degree lattitude line.\n",
    "# Thus, I will leave out lat coordinates that are <= -60 and >= 80\n",
    "lattitude_min = -60\n",
    "lattitude_max = 80\n",
    "# This leaves me with 140 degrees of lattitude to work with. I will get random numbers in ranges of 5 lattitude degrees. \n",
    "# 140 / 5 = 28 - I will have 28 lattitude regions in which to find random coordinates. Minimum Sample n of 500 / 28 = ~18 \n",
    "# coordinate points for each region, I will get 20 random coorediinates from each lattitude region that will\n",
    "# translate to an accurate representation of cities across the globe so my analysis of the weather relationships can be trustworthy\n",
    "lat_lng_coords = []\n",
    "for i in range(20):\n",
    "    lat = random.uniform(-60, -55)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(-55, -50)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(-50, -45)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(-45, -40)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(-40, -35)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(-35, -30)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(-30, -25)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(-25, -20)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(-20, -15)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(-15, -10)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(-10, -5)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(-5, 0)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(0, 5)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(5, 10)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(10, 15)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(15, 20)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(20, 25)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(25, 30)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(30, 35)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(35, 40)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(40, 45)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(45, 50)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(50, 55)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(55, 60)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(60, 65)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(65, 70)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(70, 75)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])\n",
    "for i in range(20):\n",
    "    lat = random.uniform(75, 80)\n",
    "    lng = random.uniform(longitude_min, longitude_max)\n",
    "    lat_lng_coords.append([lat, lng])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "560"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use coordinates to get city name and country code\n",
    "city_country_lst = []\n",
    "for i in lat_lng_coords:\n",
    "    nearest = citipy.nearest_city(i[0], i[1])\n",
    "    city = nearest.city_name\n",
    "    country = nearest.country_code\n",
    "    city_country_lst.append([city, country])\n",
    "len(city_country_lst)\n",
    "len(lat_lng_coords)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "kldjfklasjd\n",
      "idx:  0\n",
      "Processing record 0 | busselton, au\n",
      "idx:  1\n",
      "Processing record 1 | ushuaia, ar\n",
      "idx:  2\n",
      "Processing record 2 | mar del plata, ar\n",
      "idx:  3\n",
      "Processing record 3 | punta arenas, cl\n",
      "idx:  4\n",
      "taolanaro, mg not found. Skipping...\n",
      "idx:  5\n",
      "Processing record 5 | rikitea, pf\n",
      "idx:  6\n",
      "Processing record 6 | east london, za\n",
      "idx:  7\n",
      "Processing record 7 | dunedin, nz\n",
      "idx:  8\n",
      "Processing record 8 | punta arenas, cl\n",
      "idx:  9\n",
      "taolanaro, mg not found. Skipping...\n",
      "idx:  10\n",
      "mataura, pf not found. Skipping...\n",
      "idx:  11\n",
      "Processing record 11 | albany, au\n",
      "idx:  12\n",
      "taolanaro, mg not found. Skipping...\n",
      "idx:  13\n",
      "Processing record 13 | rikitea, pf\n",
      "idx:  14\n",
      "Processing record 14 | east london, za\n",
      "idx:  15\n",
      "tsihombe, mg not found. Skipping...\n",
      "idx:  16\n",
      "Processing record 16 | tuatapere, nz\n",
      "idx:  17\n",
      "Processing record 17 | rikitea, pf\n",
      "idx:  18\n",
      "Processing record 18 | rikitea, pf\n",
      "idx:  19\n",
      "Processing record 19 | ushuaia, ar\n",
      "idx:  20\n",
      "Processing record 20 | cape town, za\n",
      "idx:  21\n",
      "Processing record 21 | jamestown, sh\n",
      "idx:  22\n",
      "Processing record 22 | cape town, za\n",
      "idx:  23\n",
      "Processing record 23 | hobart, au\n",
      "idx:  24\n",
      "Processing record 24 | hermanus, za\n",
      "idx:  25\n",
      "Processing record 25 | castro, cl\n",
      "idx:  26\n",
      "Processing record 26 | tuatapere, nz\n",
      "idx:  27\n",
      "Processing record 27 | cape town, za\n",
      "idx:  28\n",
      "Processing record 28 | albany, au\n",
      "idx:  29\n",
      "Processing record 29 | busselton, au\n",
      "idx:  30\n",
      "Processing record 30 | bredasdorp, za\n",
      "idx:  31\n",
      "Processing record 31 | saint-philippe, re\n",
      "idx:  32\n",
      "Processing record 32 | mar del plata, ar\n",
      "idx:  33\n",
      "Processing record 33 | rio gallegos, ar\n",
      "idx:  34\n",
      "Processing record 34 | cape town, za\n",
      "idx:  35\n",
      "taolanaro, mg not found. Skipping...\n",
      "idx:  36\n",
      "Processing record 36 | avarua, ck\n",
      "idx:  37\n",
      "Processing record 37 | vaini, to\n",
      "idx:  38\n",
      "Processing record 38 | cape town, za\n",
      "idx:  39\n",
      "mataura, pf not found. Skipping...\n",
      "idx:  40\n",
      "Processing record 40 | portland, au\n",
      "idx:  41\n",
      "umzimvubu, za not found. Skipping...\n",
      "idx:  42\n",
      "Processing record 42 | jamestown, sh\n",
      "idx:  43\n",
      "Processing record 43 | saint-philippe, re\n",
      "idx:  44\n",
      "Processing record 44 | avarua, ck\n",
      "idx:  45\n",
      "Processing record 45 | cape town, za\n",
      "idx:  46\n",
      "Processing record 46 | hobart, au\n",
      "idx:  47\n",
      "Processing record 47 | mahebourg, mu\n",
      "idx:  48\n",
      "Processing record 48 | coihaique, cl\n",
      "idx:  49\n",
      "Processing record 49 | castro, cl\n",
      "idx:  50\n",
      "Processing record 50 | castro, cl\n",
      "idx:  51\n",
      "Processing record 51 | waipawa, nz\n",
      "idx:  52\n",
      "Processing record 52 | esperance, au\n",
      "idx:  53\n",
      "Processing record 53 | coihaique, cl\n",
      "idx:  54\n",
      "Processing record 54 | cape town, za\n",
      "idx:  55\n",
      "Processing record 55 | saint-philippe, re\n",
      "idx:  56\n",
      "Processing record 56 | busselton, au\n",
      "idx:  57\n",
      "Processing record 57 | rawson, ar\n",
      "idx:  58\n",
      "Processing record 58 | castro, cl\n",
      "idx:  59\n",
      "Processing record 59 | arraial do cabo, br\n",
      "idx:  60\n",
      "Processing record 60 | castro, cl\n",
      "idx:  61\n",
      "Processing record 61 | castro, cl\n",
      "idx:  62\n",
      "Processing record 62 | murchison, nz\n",
      "idx:  63\n",
      "Processing record 63 | east london, za\n",
      "idx:  64\n",
      "Processing record 64 | rikitea, pf\n",
      "idx:  65\n",
      "Processing record 65 | viedma, ar\n",
      "idx:  66\n",
      "Processing record 66 | puerto madryn, ar\n",
      "idx:  67\n",
      "Processing record 67 | souillac, mu\n",
      "idx:  68\n",
      "Processing record 68 | port lincoln, au\n",
      "idx:  69\n",
      "Processing record 69 | busselton, au\n",
      "idx:  70\n",
      "Processing record 70 | ancud, cl\n",
      "idx:  71\n",
      "Processing record 71 | castro, cl\n",
      "idx:  72\n",
      "Processing record 72 | saldanha, za\n",
      "idx:  73\n",
      "Processing record 73 | vaini, to\n",
      "idx:  74\n",
      "Processing record 74 | castro, cl\n",
      "idx:  75\n",
      "Processing record 75 | rikitea, pf\n",
      "idx:  76\n",
      "Processing record 76 | chuy, uy\n",
      "idx:  77\n",
      "tsihombe, mg not found. Skipping...\n",
      "idx:  78\n",
      "Processing record 78 | rikitea, pf\n",
      "idx:  79\n",
      "Processing record 79 | mahebourg, mu\n",
      "idx:  80\n",
      "Processing record 80 | flinders, au\n",
      "idx:  81\n",
      "Processing record 81 | busselton, au\n",
      "idx:  82\n",
      "Processing record 82 | busselton, au\n",
      "idx:  83\n",
      "Processing record 83 | plettenberg bay, za\n",
      "idx:  84\n",
      "Processing record 84 | kruisfontein, za\n",
      "idx:  85\n",
      "Processing record 85 | jamestown, sh\n",
      "idx:  86\n",
      "Processing record 86 | avarua, ck\n",
      "idx:  87\n",
      "Processing record 87 | souillac, mu\n",
      "idx:  88\n",
      "Processing record 88 | lebu, cl\n",
      "idx:  89\n",
      "Processing record 89 | avarua, ck\n",
      "idx:  90\n",
      "Processing record 90 | vaini, to\n",
      "idx:  91\n",
      "Processing record 91 | vaini, to\n",
      "idx:  92\n",
      "Processing record 92 | laguna, br\n",
      "idx:  93\n",
      "Processing record 93 | tandil, ar\n",
      "idx:  94\n",
      "Processing record 94 | vilcun, cl\n",
      "idx:  95\n",
      "Processing record 95 | port lincoln, au\n",
      "idx:  96\n",
      "Processing record 96 | lakes entrance, au\n",
      "idx:  97\n",
      "Processing record 97 | vaini, to\n",
      "idx:  98\n",
      "Processing record 98 | lebu, cl\n",
      "idx:  99\n",
      "Processing record 99 | lebu, cl\n",
      "idx:  100\n",
      "Processing record 100 | east london, za\n",
      "idx:  101\n",
      "Processing record 101 | lebu, cl\n",
      "idx:  102\n",
      "Processing record 102 | dubbo, au\n",
      "idx:  103\n",
      "Processing record 103 | arraial do cabo, br\n",
      "idx:  104\n",
      "Processing record 104 | ballina, au\n",
      "idx:  105\n",
      "Processing record 105 | lebu, cl\n",
      "idx:  106\n",
      "Processing record 106 | laguna, br\n",
      "idx:  107\n",
      "Processing record 107 | arraial do cabo, br\n",
      "idx:  108\n",
      "Processing record 108 | vaini, to\n",
      "idx:  109\n",
      "Processing record 109 | jamestown, sh\n",
      "idx:  110\n",
      "taolanaro, mg not found. Skipping...\n",
      "idx:  111\n",
      "Processing record 111 | geraldton, au\n",
      "idx:  112\n",
      "Processing record 112 | port macquarie, au\n",
      "idx:  113\n",
      "Processing record 113 | san luis, ar\n",
      "idx:  114\n",
      "Processing record 114 | lebu, cl\n",
      "idx:  115\n",
      "Processing record 115 | luderitz, na\n",
      "idx:  116\n",
      "Processing record 116 | villa carlos paz, ar\n",
      "idx:  117\n",
      "Processing record 117 | lebu, cl\n",
      "idx:  118\n",
      "Processing record 118 | richards bay, za\n",
      "idx:  119\n",
      "Processing record 119 | trinidad, uy\n",
      "idx:  120\n",
      "Processing record 120 | byron bay, au\n",
      "idx:  121\n",
      "Processing record 121 | arraial do cabo, br\n",
      "idx:  122\n",
      "Processing record 122 | moindou, nc\n",
      "idx:  123\n",
      "Processing record 123 | vao, nc\n",
      "idx:  124\n",
      "toliary, mg not found. Skipping...\n",
      "idx:  125\n",
      "Processing record 125 | vila velha, br\n",
      "idx:  126\n",
      "Processing record 126 | itaqui, br\n",
      "idx:  127\n",
      "taolanaro, mg not found. Skipping...\n",
      "idx:  128\n",
      "Processing record 128 | jamestown, sh\n",
      "idx:  129\n",
      "Processing record 129 | jamestown, sh\n",
      "idx:  130\n",
      "Processing record 130 | vao, nc\n",
      "idx:  131\n",
      "Processing record 131 | saint-philippe, re\n",
      "idx:  132\n",
      "Processing record 132 | alofi, nu\n",
      "idx:  133\n",
      "Processing record 133 | rikitea, pf\n",
      "idx:  134\n",
      "Processing record 134 | rikitea, pf\n",
      "idx:  135\n",
      "Processing record 135 | moindou, nc\n",
      "idx:  136\n",
      "Processing record 136 | xai-xai, mz\n",
      "idx:  137\n",
      "Processing record 137 | vila velha, br\n",
      "idx:  138\n",
      "Processing record 138 | florianopolis, br\n",
      "idx:  139\n",
      "Processing record 139 | coquimbo, cl\n",
      "idx:  140\n",
      "Processing record 140 | bambous virieux, mu\n",
      "idx:  141\n",
      "Processing record 141 | vila velha, br\n",
      "idx:  142\n",
      "Processing record 142 | moerai, pf\n",
      "idx:  143\n",
      "Processing record 143 | antofagasta, cl\n",
      "idx:  144\n",
      "Processing record 144 | bengkulu, id\n",
      "idx:  145\n",
      "Processing record 145 | maxixe, mz\n",
      "idx:  146\n",
      "Processing record 146 | acari, pe\n",
      "idx:  147\n",
      "Processing record 147 | walvis bay, na\n",
      "idx:  148\n",
      "marcona, pe not found. Skipping...\n",
      "idx:  149\n",
      "Processing record 149 | jamestown, sh\n",
      "idx:  150\n",
      "Processing record 150 | rikitea, pf\n",
      "idx:  151\n",
      "Processing record 151 | kang, bw\n",
      "idx:  152\n",
      "Processing record 152 | poum, nc\n",
      "idx:  153\n",
      "Processing record 153 | moerai, pf\n",
      "idx:  154\n",
      "Processing record 154 | antofagasta, cl\n",
      "idx:  155\n",
      "Processing record 155 | pisco, pe\n",
      "idx:  156\n",
      "Processing record 156 | caravelas, br\n",
      "idx:  157\n",
      "Processing record 157 | pozo colorado, py\n",
      "idx:  158\n",
      "Processing record 158 | ellisras, za\n",
      "idx:  159\n",
      "Processing record 159 | tadine, nc\n",
      "idx:  160\n",
      "Processing record 160 | alyangula, au\n",
      "idx:  161\n",
      "Processing record 161 | avarua, ck\n",
      "idx:  162\n",
      "Processing record 162 | jamestown, sh\n",
      "idx:  163\n",
      "Processing record 163 | tautira, pf\n",
      "idx:  164\n",
      "Processing record 164 | eenhana, na\n",
      "idx:  165\n",
      "Processing record 165 | carnarvon, au\n",
      "idx:  166\n",
      "Processing record 166 | isangel, vu\n",
      "idx:  167\n",
      "Processing record 167 | maragogi, br\n",
      "idx:  168\n",
      "Processing record 168 | monze, zm\n",
      "idx:  169\n",
      "halalo, wf not found. Skipping...\n",
      "idx:  170\n",
      "Processing record 170 | caravelas, br\n",
      "idx:  171\n",
      "Processing record 171 | alofi, nu\n",
      "idx:  172\n",
      "Processing record 172 | rikitea, pf\n",
      "idx:  173\n",
      "hihifo, to not found. Skipping...\n",
      "idx:  174\n",
      "Processing record 174 | rikitea, pf\n",
      "idx:  175\n",
      "Processing record 175 | jamestown, sh\n",
      "idx:  176\n",
      "Processing record 176 | puerto ayora, ec\n",
      "idx:  177\n",
      "Processing record 177 | avarua, ck\n",
      "idx:  178\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "palabuhanratu, id not found. Skipping...\n",
      "idx:  179\n",
      "Processing record 179 | opuwo, na\n",
      "idx:  180\n",
      "Processing record 180 | puerto ayora, ec\n",
      "idx:  181\n",
      "Processing record 181 | lumeje, ao\n",
      "idx:  182\n",
      "Processing record 182 | atuona, pf\n",
      "idx:  183\n",
      "liku, wf not found. Skipping...\n",
      "idx:  184\n",
      "Processing record 184 | faanui, pf\n",
      "idx:  185\n",
      "samusu, ws not found. Skipping...\n",
      "idx:  186\n",
      "Processing record 186 | chimbote, pe\n",
      "idx:  187\n",
      "Processing record 187 | grand gaube, mu\n",
      "idx:  188\n",
      "Processing record 188 | labuhan, id\n",
      "idx:  189\n",
      "Processing record 189 | sambava, mg\n",
      "idx:  190\n",
      "lata, sb not found. Skipping...\n",
      "idx:  191\n",
      "Processing record 191 | puerto ayora, ec\n",
      "idx:  192\n",
      "Processing record 192 | georgetown, sh\n",
      "idx:  193\n",
      "Processing record 193 | sambava, mg\n",
      "idx:  194\n",
      "Processing record 194 | hithadhoo, mv\n",
      "idx:  195\n",
      "Processing record 195 | atuona, pf\n",
      "idx:  196\n",
      "Processing record 196 | san ramon, bo\n",
      "idx:  197\n",
      "Processing record 197 | koungou, yt\n",
      "idx:  198\n",
      "Processing record 198 | hithadhoo, mv\n",
      "idx:  199\n",
      "Processing record 199 | banjar, id\n",
      "idx:  200\n",
      "Processing record 200 | carauari, br\n",
      "idx:  201\n",
      "Processing record 201 | hithadhoo, mv\n",
      "idx:  202\n",
      "Processing record 202 | belem de sao francisco, br\n",
      "idx:  203\n",
      "Processing record 203 | ilula, tz\n",
      "idx:  204\n",
      "Processing record 204 | bengkulu, id\n",
      "idx:  205\n",
      "Processing record 205 | georgetown, sh\n",
      "idx:  206\n",
      "Processing record 206 | faanui, pf\n",
      "idx:  207\n",
      "Processing record 207 | manicore, br\n",
      "idx:  208\n",
      "Processing record 208 | nabire, id\n",
      "idx:  209\n",
      "Processing record 209 | faanui, pf\n",
      "idx:  210\n",
      "Processing record 210 | olinda, br\n",
      "idx:  211\n",
      "Processing record 211 | hithadhoo, mv\n",
      "idx:  212\n",
      "Processing record 212 | atuona, pf\n",
      "idx:  213\n",
      "saleaula, ws not found. Skipping...\n",
      "idx:  214\n",
      "Processing record 214 | georgetown, sh\n",
      "idx:  215\n",
      "Processing record 215 | auki, sb\n",
      "idx:  216\n",
      "Processing record 216 | atuona, pf\n",
      "idx:  217\n",
      "Processing record 217 | atuona, pf\n",
      "idx:  218\n",
      "Processing record 218 | cabedelo, br\n",
      "idx:  219\n",
      "Processing record 219 | soyo, ao\n",
      "idx:  220\n",
      "Processing record 220 | atuona, pf\n",
      "idx:  221\n",
      "Processing record 221 | victoria, sc\n",
      "idx:  222\n",
      "Processing record 222 | sepuka, tz\n",
      "idx:  223\n",
      "Processing record 223 | puerto ayora, ec\n",
      "idx:  224\n",
      "Processing record 224 | victoria, sc\n",
      "idx:  225\n",
      "Processing record 225 | faanui, pf\n",
      "idx:  226\n",
      "Processing record 226 | lorengau, pg\n",
      "idx:  227\n",
      "Processing record 227 | goma, cd\n",
      "idx:  228\n",
      "Processing record 228 | puerto ayora, ec\n",
      "idx:  229\n",
      "Processing record 229 | takoradi, gh\n",
      "idx:  230\n",
      "Processing record 230 | lorengau, pg\n",
      "idx:  231\n",
      "Processing record 231 | ambon, id\n",
      "idx:  232\n",
      "Processing record 232 | iquitos, pe\n",
      "idx:  233\n",
      "Processing record 233 | kasongo, cd\n",
      "idx:  234\n",
      "Processing record 234 | gamba, ga\n",
      "idx:  235\n",
      "Processing record 235 | puerto narino, co\n",
      "idx:  236\n",
      "Processing record 236 | balikpapan, id\n",
      "idx:  237\n",
      "Processing record 237 | victoria, sc\n",
      "idx:  238\n",
      "Processing record 238 | martapura, id\n",
      "idx:  239\n",
      "Processing record 239 | lastoursville, ga\n",
      "idx:  240\n",
      "Processing record 240 | booue, ga\n",
      "idx:  241\n",
      "Processing record 241 | hobyo, so\n",
      "idx:  242\n",
      "Processing record 242 | mbaiki, cf\n",
      "idx:  243\n",
      "Processing record 243 | cururupu, br\n",
      "idx:  244\n",
      "Processing record 244 | loa janan, id\n",
      "idx:  245\n",
      "Processing record 245 | arua, ug\n",
      "idx:  246\n",
      "Processing record 246 | atuona, pf\n",
      "idx:  247\n",
      "Processing record 247 | puerto ayora, ec\n",
      "idx:  248\n",
      "Processing record 248 | butaritari, ki\n",
      "idx:  249\n",
      "rungata, ki not found. Skipping...\n",
      "idx:  250\n",
      "Processing record 250 | bontang, id\n",
      "idx:  251\n",
      "Processing record 251 | puerto ayora, ec\n",
      "idx:  252\n",
      "Processing record 252 | hilo, us\n",
      "idx:  253\n",
      "Processing record 253 | ixtapa, mx\n",
      "idx:  254\n",
      "Processing record 254 | victoria, sc\n",
      "idx:  255\n",
      "vaitupu, wf not found. Skipping...\n",
      "idx:  256\n",
      "goderich, sl not found. Skipping...\n",
      "idx:  257\n",
      "Processing record 257 | puerto ayora, ec\n",
      "idx:  258\n",
      "Processing record 258 | meulaboh, id\n",
      "idx:  259\n",
      "Processing record 259 | puerto ayora, ec\n",
      "idx:  260\n",
      "Processing record 260 | itarema, br\n",
      "idx:  261\n",
      "Processing record 261 | cayenne, gf\n",
      "idx:  262\n",
      "Processing record 262 | port blair, in\n",
      "idx:  263\n",
      "airai, pw not found. Skipping...\n",
      "idx:  264\n",
      "Processing record 264 | ndele, cf\n",
      "idx:  265\n",
      "Processing record 265 | mabaruma, gy\n",
      "idx:  266\n",
      "Processing record 266 | bubaque, gw\n",
      "idx:  267\n",
      "Processing record 267 | ca mau, vn\n",
      "idx:  268\n",
      "Processing record 268 | kourou, gf\n",
      "idx:  269\n",
      "Processing record 269 | bandarbeyla, so\n",
      "idx:  270\n",
      "Processing record 270 | atuona, pf\n",
      "idx:  271\n",
      "Processing record 271 | batangafo, cf\n",
      "idx:  272\n",
      "Processing record 272 | nicoya, cr\n",
      "idx:  273\n",
      "Processing record 273 | carutapera, br\n",
      "idx:  274\n",
      "Processing record 274 | kulhudhuffushi, mv\n",
      "idx:  275\n",
      "Processing record 275 | garowe, so\n",
      "idx:  276\n",
      "Processing record 276 | bida, ng\n",
      "idx:  277\n",
      "Processing record 277 | maturin, ve\n",
      "idx:  278\n",
      "Processing record 278 | san patricio, mx\n",
      "idx:  279\n",
      "vaitupu, wf not found. Skipping...\n",
      "idx:  280\n",
      "Processing record 280 | algeciras, ph\n",
      "idx:  281\n",
      "Processing record 281 | hilo, us\n",
      "idx:  282\n",
      "Processing record 282 | am timan, td\n",
      "idx:  283\n",
      "Processing record 283 | santa marta, co\n",
      "idx:  284\n",
      "Processing record 284 | dese, et\n",
      "idx:  285\n",
      "mergui, mm not found. Skipping...\n",
      "idx:  286\n",
      "Processing record 286 | kavali, in\n",
      "idx:  287\n",
      "Processing record 287 | kapaa, us\n",
      "idx:  288\n",
      "Processing record 288 | siguiri, gn\n",
      "idx:  289\n",
      "Processing record 289 | buluang, ph\n",
      "idx:  290\n",
      "Processing record 290 | kavaratti, in\n",
      "idx:  291\n",
      "bara, sd not found. Skipping...\n",
      "idx:  292\n",
      "Processing record 292 | salalah, om\n",
      "idx:  293\n",
      "Processing record 293 | san andres, co\n",
      "idx:  294\n",
      "Processing record 294 | cabo san lucas, mx\n",
      "idx:  295\n",
      "Processing record 295 | gigmoto, ph\n",
      "idx:  296\n",
      "meyungs, pw not found. Skipping...\n",
      "idx:  297\n",
      "Processing record 297 | butaritari, ki\n",
      "idx:  298\n",
      "Processing record 298 | porto novo, cv\n",
      "idx:  299\n",
      "Processing record 299 | hilo, us\n",
      "idx:  300\n",
      "Processing record 300 | san jeronimo, mx\n",
      "idx:  301\n",
      "Processing record 301 | arlit, ne\n",
      "idx:  302\n",
      "Processing record 302 | salalah, om\n",
      "idx:  303\n",
      "umm durman, sd not found. Skipping...\n",
      "idx:  304\n",
      "Processing record 304 | bilma, ne\n",
      "idx:  305\n",
      "bara, sd not found. Skipping...\n",
      "idx:  306\n",
      "codrington, ag not found. Skipping...\n",
      "idx:  307\n",
      "Processing record 307 | butaritari, ki\n",
      "idx:  308\n",
      "Processing record 308 | zhuhai, cn\n",
      "idx:  309\n",
      "Processing record 309 | abha, sa\n",
      "idx:  310\n",
      "Processing record 310 | kapaa, us\n",
      "idx:  311\n",
      "Processing record 311 | hilo, us\n",
      "idx:  312\n",
      "Processing record 312 | butaritari, ki\n",
      "idx:  313\n",
      "Processing record 313 | sur, om\n",
      "idx:  314\n",
      "Processing record 314 | kidal, ml\n",
      "idx:  315\n",
      "Processing record 315 | bago, mm\n",
      "idx:  316\n",
      "macaboboni, ph not found. Skipping...\n",
      "idx:  317\n",
      "Processing record 317 | sinnamary, gf\n",
      "idx:  318\n",
      "Processing record 318 | chitrakonda, in\n",
      "idx:  319\n",
      "Processing record 319 | hilo, us\n",
      "idx:  320\n",
      "faya, td not found. Skipping...\n",
      "idx:  321\n",
      "Processing record 321 | ahualulco, mx\n",
      "idx:  322\n",
      "Processing record 322 | betma, in\n",
      "idx:  323\n",
      "Processing record 323 | nouadhibou, mr\n",
      "idx:  324\n",
      "Processing record 324 | ojuelos de jalisco, mx\n",
      "idx:  325\n",
      "marzuq, ly not found. Skipping...\n",
      "idx:  326\n",
      "Processing record 326 | nuevo progreso, mx\n",
      "idx:  327\n",
      "Processing record 327 | tessalit, ml\n",
      "idx:  328\n",
      "Processing record 328 | lang son, vn\n",
      "idx:  329\n",
      "Processing record 329 | cuauhtemoc, mx\n",
      "idx:  330\n",
      "Processing record 330 | ponta do sol, cv\n",
      "idx:  331\n",
      "Processing record 331 | hirara, jp\n",
      "idx:  332\n",
      "Processing record 332 | sur, om\n",
      "idx:  333\n",
      "Processing record 333 | kapaa, us\n",
      "idx:  334\n",
      "Processing record 334 | lompoc, us\n",
      "idx:  335\n",
      "Processing record 335 | jalu, ly\n",
      "idx:  336\n",
      "Processing record 336 | teknaf, bd\n",
      "idx:  337\n",
      "Processing record 337 | butaritari, ki\n",
      "idx:  338\n",
      "Processing record 338 | kahului, us\n",
      "idx:  339\n",
      "Processing record 339 | lalmohan, bd\n",
      "idx:  340\n",
      "Processing record 340 | lockhart, us\n",
      "idx:  341\n",
      "Processing record 341 | kapaa, us\n",
      "idx:  342\n",
      "Processing record 342 | tawang, in\n",
      "idx:  343\n",
      "Processing record 343 | kushima, jp\n",
      "idx:  344\n",
      "Processing record 344 | lompoc, us\n",
      "idx:  345\n",
      "Processing record 345 | donna, us\n",
      "idx:  346\n",
      "Processing record 346 | hilo, us\n",
      "idx:  347\n",
      "sentyabrskiy, ru not found. Skipping...\n",
      "idx:  348\n",
      "Processing record 348 | kapaa, us\n",
      "idx:  349\n",
      "Processing record 349 | tezu, in\n",
      "idx:  350\n",
      "Processing record 350 | victoria, us\n",
      "idx:  351\n",
      "marv dasht, ir not found. Skipping...\n",
      "idx:  352\n",
      "Processing record 352 | los llanos de aridane, es\n",
      "idx:  353\n",
      "Processing record 353 | half moon bay, us\n",
      "idx:  354\n",
      "Processing record 354 | kapaa, us\n",
      "idx:  355\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "codrington, ag not found. Skipping...\n",
      "idx:  356\n",
      "Processing record 356 | hasaki, jp\n",
      "idx:  357\n",
      "Processing record 357 | katsuura, jp\n",
      "idx:  358\n",
      "Processing record 358 | tezu, in\n",
      "idx:  359\n",
      "Processing record 359 | kahului, us\n",
      "idx:  360\n",
      "Processing record 360 | muroto, jp\n",
      "idx:  361\n",
      "Processing record 361 | vicksburg, us\n",
      "idx:  362\n",
      "Processing record 362 | kapaa, us\n",
      "idx:  363\n",
      "Processing record 363 | jumla, np\n",
      "idx:  364\n",
      "Processing record 364 | sunland park, us\n",
      "idx:  365\n",
      "Processing record 365 | fukue, jp\n",
      "idx:  366\n",
      "yaan, cn not found. Skipping...\n",
      "idx:  367\n",
      "Processing record 367 | pacific grove, us\n",
      "idx:  368\n",
      "lemesos, cy not found. Skipping...\n",
      "idx:  369\n",
      "Processing record 369 | lompoc, us\n",
      "idx:  370\n",
      "tubruq, ly not found. Skipping...\n",
      "idx:  371\n",
      "Processing record 371 | ziarat, pk\n",
      "idx:  372\n",
      "Processing record 372 | panama city, us\n",
      "idx:  373\n",
      "Processing record 373 | ilam, ir\n",
      "idx:  374\n",
      "Processing record 374 | tezu, in\n",
      "idx:  375\n",
      "Processing record 375 | vila franca do campo, pt\n",
      "idx:  376\n",
      "Processing record 376 | virginia beach, us\n",
      "idx:  377\n",
      "Processing record 377 | katsuura, jp\n",
      "idx:  378\n",
      "Processing record 378 | karpathos, gr\n",
      "idx:  379\n",
      "Processing record 379 | birjand, ir\n",
      "idx:  380\n",
      "Processing record 380 | karaman, tr\n",
      "idx:  381\n",
      "Processing record 381 | cascais, pt\n",
      "idx:  382\n",
      "Processing record 382 | nikolskoye, ru\n",
      "idx:  383\n",
      "Processing record 383 | espanola, us\n",
      "idx:  384\n",
      "Processing record 384 | kapaa, us\n",
      "idx:  385\n",
      "Processing record 385 | ribeira grande, pt\n",
      "idx:  386\n",
      "Processing record 386 | ribeira grande, pt\n",
      "idx:  387\n",
      "karakendzha, tj not found. Skipping...\n",
      "idx:  388\n",
      "Processing record 388 | nikolskoye, ru\n",
      "idx:  389\n",
      "Processing record 389 | korla, cn\n",
      "idx:  390\n",
      "Processing record 390 | jiayuguan, cn\n",
      "idx:  391\n",
      "Processing record 391 | shache, cn\n",
      "idx:  392\n",
      "Processing record 392 | barstow, us\n",
      "idx:  393\n",
      "Processing record 393 | torbay, ca\n",
      "idx:  394\n",
      "Processing record 394 | nikolskoye, ru\n",
      "idx:  395\n",
      "Processing record 395 | shache, cn\n",
      "idx:  396\n",
      "Processing record 396 | nemuro, jp\n",
      "idx:  397\n",
      "Processing record 397 | kapaa, us\n",
      "idx:  398\n",
      "Processing record 398 | mardin, tr\n",
      "idx:  399\n",
      "Processing record 399 | saint george, bm\n",
      "idx:  400\n",
      "Processing record 400 | kodiak, us\n",
      "idx:  401\n",
      "dzhusaly, kz not found. Skipping...\n",
      "idx:  402\n",
      "Processing record 402 | erenhot, cn\n",
      "idx:  403\n",
      "Processing record 403 | severo-kurilsk, ru\n",
      "idx:  404\n",
      "Processing record 404 | green river, us\n",
      "idx:  405\n",
      "Processing record 405 | yumen, cn\n",
      "idx:  406\n",
      "Processing record 406 | torbay, ca\n",
      "idx:  407\n",
      "Processing record 407 | provideniya, ru\n",
      "idx:  408\n",
      "Processing record 408 | urumqi, cn\n",
      "idx:  409\n",
      "Processing record 409 | kant, kg\n",
      "idx:  410\n",
      "Processing record 410 | karakol, kg\n",
      "idx:  411\n",
      "Processing record 411 | hovd, mn\n",
      "idx:  412\n",
      "shkotovo-26, ru not found. Skipping...\n",
      "idx:  413\n",
      "Processing record 413 | hami, cn\n",
      "idx:  414\n",
      "Processing record 414 | fortuna, us\n",
      "idx:  415\n",
      "Processing record 415 | nikolskoye, ru\n",
      "idx:  416\n",
      "kuche, cn not found. Skipping...\n",
      "idx:  417\n",
      "Processing record 417 | altopascio, it\n",
      "idx:  418\n",
      "Processing record 418 | north bend, us\n",
      "idx:  419\n",
      "Processing record 419 | kars, tr\n",
      "idx:  420\n",
      "Processing record 420 | zavallya, ua\n",
      "idx:  421\n",
      "Processing record 421 | plouzane, fr\n",
      "idx:  422\n",
      "Processing record 422 | killarney, ca\n",
      "idx:  423\n",
      "Processing record 423 | sitka, us\n",
      "idx:  424\n",
      "Processing record 424 | provideniya, ru\n",
      "idx:  425\n",
      "Processing record 425 | lagoa, pt\n",
      "idx:  426\n",
      "Processing record 426 | mandalgovi, mn\n",
      "idx:  427\n",
      "Processing record 427 | avon, fr\n",
      "idx:  428\n",
      "Processing record 428 | bethel, us\n",
      "idx:  429\n",
      "Processing record 429 | glendive, us\n",
      "idx:  430\n",
      "Processing record 430 | voyinka, ua\n",
      "idx:  431\n",
      "Processing record 431 | lagoa, pt\n",
      "idx:  432\n",
      "Processing record 432 | ucluelet, ca\n",
      "idx:  433\n",
      "Processing record 433 | moron, mn\n",
      "idx:  434\n",
      "wulanhaote, cn not found. Skipping...\n",
      "idx:  435\n",
      "Processing record 435 | novopokrovka, ru\n",
      "idx:  436\n",
      "Processing record 436 | baijiantan, cn\n",
      "idx:  437\n",
      "Processing record 437 | bethel, us\n",
      "idx:  438\n",
      "Processing record 438 | cernat, ro\n",
      "idx:  439\n",
      "Processing record 439 | nevelsk, ru\n",
      "idx:  440\n",
      "Processing record 440 | khilok, ru\n",
      "idx:  441\n",
      "Processing record 441 | vozrozhdeniye, ru\n",
      "idx:  442\n",
      "Processing record 442 | provideniya, ru\n",
      "idx:  443\n",
      "Processing record 443 | kodiak, us\n",
      "idx:  444\n",
      "Processing record 444 | khuzhir, ru\n",
      "idx:  445\n",
      "Processing record 445 | kungurtug, ru\n",
      "idx:  446\n",
      "Processing record 446 | kitimat, ca\n",
      "idx:  447\n",
      "Processing record 447 | tasiilaq, gl\n",
      "idx:  448\n",
      "Processing record 448 | ketchikan, us\n",
      "idx:  449\n",
      "Processing record 449 | sitka, us\n",
      "idx:  450\n",
      "saint anthony, ca not found. Skipping...\n",
      "idx:  451\n",
      "Processing record 451 | revelstoke, ca\n",
      "idx:  452\n",
      "Processing record 452 | chute-aux-outardes, ca\n",
      "idx:  453\n",
      "Processing record 453 | verkhniy avzyan, ru\n",
      "idx:  454\n",
      "Processing record 454 | thompson, ca\n",
      "idx:  455\n",
      "Processing record 455 | millet, ca\n",
      "idx:  456\n",
      "Processing record 456 | hoogeveen, nl\n",
      "idx:  457\n",
      "Processing record 457 | vestmannaeyjar, is\n",
      "idx:  458\n",
      "Processing record 458 | bonavista, ca\n",
      "idx:  459\n",
      "Processing record 459 | kirgiz-miyaki, ru\n",
      "idx:  460\n",
      "Processing record 460 | bethel, us\n",
      "idx:  461\n",
      "Processing record 461 | tynda, ru\n",
      "idx:  462\n",
      "Processing record 462 | olafsvik, is\n",
      "idx:  463\n",
      "Processing record 463 | tasiilaq, gl\n",
      "idx:  464\n",
      "chagda, ru not found. Skipping...\n",
      "idx:  465\n",
      "yanchukan, ru not found. Skipping...\n",
      "idx:  466\n",
      "attawapiskat, ca not found. Skipping...\n",
      "idx:  467\n",
      "Processing record 467 | taseyevo, ru\n",
      "idx:  468\n",
      "Processing record 468 | tasiilaq, gl\n",
      "idx:  469\n",
      "Processing record 469 | ossora, ru\n",
      "idx:  470\n",
      "Processing record 470 | ayan, ru\n",
      "idx:  471\n",
      "Processing record 471 | thompson, ca\n",
      "idx:  472\n",
      "attawapiskat, ca not found. Skipping...\n",
      "idx:  473\n",
      "Processing record 473 | vitim, ru\n",
      "idx:  474\n",
      "Processing record 474 | visby, se\n",
      "idx:  475\n",
      "Processing record 475 | bethel, us\n",
      "idx:  476\n",
      "Processing record 476 | aldan, ru\n",
      "idx:  477\n",
      "Processing record 477 | togur, ru\n",
      "idx:  478\n",
      "Processing record 478 | talaya, ru\n",
      "idx:  479\n",
      "Processing record 479 | bethel, us\n",
      "idx:  480\n",
      "Processing record 480 | fairbanks, us\n",
      "idx:  481\n",
      "Processing record 481 | ust-maya, ru\n",
      "idx:  482\n",
      "Processing record 482 | iqaluit, ca\n",
      "idx:  483\n",
      "Processing record 483 | yerbogachen, ru\n",
      "idx:  484\n",
      "Processing record 484 | klaksvik, fo\n",
      "idx:  485\n",
      "Processing record 485 | bethel, us\n",
      "idx:  486\n",
      "Processing record 486 | noyabrsk, ru\n",
      "idx:  487\n",
      "sorvag, fo not found. Skipping...\n",
      "idx:  488\n",
      "Processing record 488 | sangar, ru\n",
      "idx:  489\n",
      "Processing record 489 | haines junction, ca\n",
      "idx:  490\n",
      "kamenskoye, ru not found. Skipping...\n",
      "idx:  491\n",
      "Processing record 491 | thompson, ca\n",
      "idx:  492\n",
      "Processing record 492 | thompson, ca\n",
      "idx:  493\n",
      "Processing record 493 | pangnirtung, ca\n",
      "idx:  494\n",
      "Processing record 494 | la ronge, ca\n",
      "idx:  495\n",
      "Processing record 495 | yellowknife, ca\n",
      "idx:  496\n",
      "Processing record 496 | paamiut, gl\n",
      "idx:  497\n",
      "Processing record 497 | podosinovets, ru\n",
      "idx:  498\n",
      "artyk, ru not found. Skipping...\n",
      "idx:  499\n",
      "Processing record 499 | fort nelson, ca\n",
      "idx:  500\n",
      "Processing record 500 | yellowknife, ca\n",
      "idx:  501\n",
      "Processing record 501 | kostomuksha, ru\n",
      "idx:  502\n",
      "Processing record 502 | yar-sale, ru\n",
      "idx:  503\n",
      "Processing record 503 | pangnirtung, ca\n",
      "idx:  504\n",
      "Processing record 504 | loukhi, ru\n",
      "idx:  505\n",
      "Processing record 505 | mayo, ca\n",
      "idx:  506\n",
      "Processing record 506 | komsomolskiy, ru\n",
      "idx:  507\n",
      "Processing record 507 | yellowknife, ca\n",
      "idx:  508\n",
      "Processing record 508 | boden, se\n",
      "idx:  509\n",
      "Processing record 509 | yellowknife, ca\n",
      "idx:  510\n",
      "Processing record 510 | yellowknife, ca\n",
      "idx:  511\n",
      "amderma, ru not found. Skipping...\n",
      "idx:  512\n",
      "Processing record 512 | zyryanka, ru\n",
      "idx:  513\n",
      "Processing record 513 | qasigiannguit, gl\n",
      "idx:  514\n",
      "Processing record 514 | talnakh, ru\n",
      "idx:  515\n",
      "Processing record 515 | tuktoyaktuk, ca\n",
      "idx:  516\n",
      "Processing record 516 | nyurba, ru\n",
      "idx:  517\n",
      "Processing record 517 | aklavik, ca\n",
      "idx:  518\n",
      "Processing record 518 | college, us\n",
      "idx:  519\n",
      "Processing record 519 | inuvik, ca\n",
      "idx:  520\n",
      "Processing record 520 | clyde river, ca\n",
      "idx:  521\n",
      "Processing record 521 | dikson, ru\n",
      "idx:  522\n",
      "Processing record 522 | bilibino, ru\n",
      "idx:  523\n",
      "Processing record 523 | ilulissat, gl\n",
      "idx:  524\n",
      "Processing record 524 | qaanaaq, gl\n",
      "idx:  525\n",
      "Processing record 525 | vardo, no\n",
      "idx:  526\n",
      "Processing record 526 | khatanga, ru\n",
      "idx:  527\n",
      "Processing record 527 | ostrovnoy, ru\n",
      "idx:  528\n",
      "Processing record 528 | pevek, ru\n",
      "idx:  529\n",
      "amderma, ru not found. Skipping...\n",
      "idx:  530\n",
      "amderma, ru not found. Skipping...\n",
      "idx:  531\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing record 531 | pevek, ru\n",
      "idx:  532\n",
      "Processing record 532 | chokurdakh, ru\n",
      "idx:  533\n",
      "Processing record 533 | ilulissat, gl\n",
      "idx:  534\n",
      "Processing record 534 | talnakh, ru\n",
      "idx:  535\n",
      "Processing record 535 | leningradskiy, ru\n",
      "idx:  536\n",
      "Processing record 536 | upernavik, gl\n",
      "idx:  537\n",
      "Processing record 537 | dudinka, ru\n",
      "idx:  538\n",
      "barentsburg, sj not found. Skipping...\n",
      "idx:  539\n",
      "illoqqortoormiut, gl not found. Skipping...\n",
      "idx:  540\n",
      "Processing record 540 | barrow, us\n",
      "idx:  541\n",
      "Processing record 541 | tasiilaq, gl\n",
      "idx:  542\n",
      "Processing record 542 | pevek, ru\n",
      "idx:  543\n",
      "Processing record 543 | dikson, ru\n",
      "idx:  544\n",
      "mys shmidta, ru not found. Skipping...\n",
      "idx:  545\n",
      "nizhneyansk, ru not found. Skipping...\n",
      "idx:  546\n",
      "Processing record 546 | berlevag, no\n",
      "idx:  547\n",
      "mys shmidta, ru not found. Skipping...\n",
      "idx:  548\n",
      "amderma, ru not found. Skipping...\n",
      "idx:  549\n",
      "Processing record 549 | narsaq, gl\n",
      "idx:  550\n",
      "illoqqortoormiut, gl not found. Skipping...\n",
      "idx:  551\n",
      "Processing record 551 | leningradskiy, ru\n",
      "idx:  552\n",
      "Processing record 552 | ilulissat, gl\n",
      "idx:  553\n",
      "Processing record 553 | pevek, ru\n",
      "idx:  554\n",
      "barentsburg, sj not found. Skipping...\n",
      "idx:  555\n",
      "Processing record 555 | thompson, ca\n",
      "idx:  556\n",
      "Processing record 556 | thompson, ca\n",
      "idx:  557\n",
      "Processing record 557 | husavik, is\n",
      "idx:  558\n",
      "Processing record 558 | tuktoyaktuk, ca\n",
      "idx:  559\n",
      "mys shmidta, ru not found. Skipping...\n",
      "==========\n",
      "Data Retrieval Complete\n",
      "==========\n",
      "count errors 0\n"
     ]
    }
   ],
   "source": [
    "temp = []\n",
    "humidity = []\n",
    "wind_speed = []\n",
    "cloud_percent = []\n",
    "# get weather data for each city, country in list\n",
    "print('kldjfklasjd')\n",
    "count_errors = 0\n",
    "# hack to get around looping through city_country_lst and not messing up results by getting rid of index while looping through list you are getting rid of index in\n",
    "# index_lst = []\n",
    "final_lat_lng_coords= []\n",
    "final_city_country_lst = []\n",
    "for i in enumerate(city_country_lst):\n",
    "    index = i[0]\n",
    "    print('idx: ', index)\n",
    "    city_country = i[1]\n",
    "    city = city_country[0]\n",
    "    country = city_country[1]\n",
    "    response = requests.get(f\"http://api.openweathermap.org/data/2.5/weather?q={city},{country}&APPID=fa87ebc6ce0f0896f3d12c6bcab56d4f&units=imperial\").json()\n",
    "    if response['cod'] != 200:\n",
    "        print(f\"{city}, {country} not found. Skipping...\")\n",
    "#         index_lst.append(index)\n",
    "        continue\n",
    "#         count_errors += 1\n",
    "#         del lat_lng_coords[index]\n",
    "#         del city_country_lst[index]\n",
    "#         continue\n",
    "    print(f\"Processing record {index} | {city}, {country}\")\n",
    "    final_lat_lng_coords.append(lat_lng_coords[index])\n",
    "    final_city_country_lst.append(city_country)\n",
    "    temp.append(response[\"main\"][\"temp_max\"])\n",
    "    humidity.append(response[\"main\"][\"humidity\"])\n",
    "    wind_speed.append(response[\"wind\"][\"speed\"])\n",
    "    cloud_percent.append(response[\"clouds\"][\"all\"])\n",
    "print(\"==========\\nData Retrieval Complete\\n==========\")\n",
    "print('count errors', count_errors)\n",
    "\n",
    "# loop through index_list and get rid of indexes in lat_lng_coords and city country list\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "final lat lng 495\n",
      "finL city country 495\n",
      "495 495\n"
     ]
    }
   ],
   "source": [
    "# print('idx list', len(index_lst))\n",
    "print('final lat lng', len(final_lat_lng_coords))\n",
    "print('finL city country', len(final_city_country_lst))\n",
    "print(len(temp), len(humidity))\n",
    "# print(index_lst)\n",
    "# for i in index_lst:\n",
    "#     print(i)\n",
    "#     lat_lng_coords.pop(i)\n",
    "#     city_country_lst.pop(i)\n",
    "# print('final city country lng lat', len(lat_lng_coor))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "495 495 495 495\n"
     ]
    }
   ],
   "source": [
    "# put lattitude, longitude, city, country into own arrays \n",
    "lat = []\n",
    "lng = []\n",
    "city_lst = []\n",
    "country_lst = []\n",
    "for i in final_lat_lng_coords:\n",
    "    lat.append(i[0])\n",
    "    lng.append(i[1])\n",
    "for i in final_city_country_lst:\n",
    "    city_lst.append(i[0])\n",
    "    country_lst.append(i[1])\n",
    "print(len(lat), len(lng), len(city_lst), len(country_lst))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lattitude length: 495\n",
      "longitude length: 495\n",
      "city length: 495\n",
      "country length: 495\n",
      "max_temperature length: 495\n",
      "humidity length: 495\n",
      "wind_speed length: 495\n",
      "cloud_percentage length: 495\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The code for this section scatter-plots Lattitude as the dependent variable (x-axis) and Maximum Temperature as the independent variable (y-axis).\n",
      "The scatter plot shows that temperatures are reliably colder at the more extreme Lattitudes or closer to the poles. Temperatures near the Lattitude 0, or closer to the center of the earth, are reliably warmer than at geogrpahic points farther away from the center of the earth.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The code for this section scatter-plots Lattitude as the dependent variable (x-axis) and Humidity as the independent variable (y-axis).\n",
      "The scatter plot does not show a reliable relationship\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The code for this section scatter-plots Lattitude as the dependent variable (x-axis) and Cloudiness Percentage as the independent variable (y-axis).\n",
      "The scatter plot does not show a reliable relationship to make any conclusions about the effect of Lattitude on Cloudiness\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The code for this section scatter-plots Lattitude as the dependent variable (x-axis) and Wind Speed as the independent variable (y-axis).\n",
      "You can see a mild negative relationship between higher lattitudes and wind speed\n"
     ]
    }
   ],
   "source": [
    "city_weather_dct = {\n",
    "    \"lattitude\": lat,\n",
    "    \"longitude\": lng,\n",
    "    \"city\": city_lst,\n",
    "    \"country\": country_lst,\n",
    "    \"max_temperature\": temp,\n",
    "    \"humidity\": humidity,\n",
    "    \"wind_speed\": wind_speed,\n",
    "    \"cloud_percentage\": cloud_percent\n",
    "}\n",
    "for key, val in city_weather_dct.items():\n",
    "    print(key, 'length:', len(val))\n",
    "df = pd.DataFrame(city_weather_dct)\n",
    "df.head()\n",
    "\n",
    "# lat vs temp\n",
    "x_vals = df[\"lattitude\"]\n",
    "y_vals = df[\"max_temperature\"]\n",
    "plt.scatter(x_vals, y_vals)\n",
    "plt.xlabel(\"Lattitude\")\n",
    "plt.ylabel(\"Temperature\")\n",
    "plt.title(\"City Lattitude vs Max Temperature 09/30/20\")\n",
    "plt.show()\n",
    "print(\"The code for this section scatter-plots Lattitude as the dependent variable (x-axis) and Maximum Temperature as the independent variable (y-axis).\")\n",
    "print(\"The scatter plot shows that temperatures are reliably colder at the more extreme Lattitudes or closer to the poles. Temperatures near the Lattitude 0, or closer to the center of the earth, are reliably warmer than at geogrpahic points farther away from the center of the earth.\")\n",
    "\n",
    "# Lat vs humidity\n",
    "y_vals = df[\"humidity\"]\n",
    "plt.scatter(x_vals, y_vals)\n",
    "plt.xlabel(\"Lattitude\")\n",
    "plt.ylabel(\"Humidity\")\n",
    "plt.title(\"City Lattitude vs Humidity 09/30/20\")\n",
    "plt.show()\n",
    "print(\"The code for this section scatter-plots Lattitude as the dependent variable (x-axis) and Humidity as the independent variable (y-axis).\")\n",
    "print(\"The scatter plot does not show a reliable relationship\")\n",
    "\n",
    "# Lat vs CLoudiness\n",
    "y_vals = df[\"cloud_percentage\"]\n",
    "plt.scatter(x_vals, y_vals)\n",
    "plt.xlabel(\"Lattitude\")\n",
    "plt.ylabel(\"Cloudiness %\")\n",
    "plt.title(\"City Lattitude vs. Cloudiness 09/30/20\")\n",
    "plt.show()\n",
    "print(\"The code for this section scatter-plots Lattitude as the dependent variable (x-axis) and Cloudiness Percentage as the independent variable (y-axis).\")\n",
    "print(\"The scatter plot does not show a reliable relationship to make any conclusions about the effect of Lattitude on Cloudiness\")\n",
    "\n",
    "# Lat vs Wind Speed\n",
    "y_vals = df[\"wind_speed\"]\n",
    "plt.scatter(x_vals, y_vals)\n",
    "plt.xlabel(\"Lattitude\")\n",
    "plt.ylabel(\"Wind Speed\")\n",
    "plt.title(\"City Lattitude vs. Wind Speed\")\n",
    "plt.show()\n",
    "print(\"The code for this section scatter-plots Lattitude as the dependent variable (x-axis) and Wind Speed as the independent variable (y-axis).\")\n",
    "print(\"You can see a mild negative relationship between higher lattitudes and wind speed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0      72.645373\n",
      "1      72.611954\n",
      "2      72.426780\n",
      "3      72.788281\n",
      "4      72.591108\n",
      "         ...    \n",
      "490    52.210534\n",
      "491    52.621606\n",
      "492    52.446481\n",
      "493    52.225148\n",
      "494    52.511148\n",
      "Name: lattitude, Length: 495, dtype: float64\n",
      "y = -0.15x +63.92\n",
      "The r-value is: 0.12249776679400265\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lat and Temp Regression\n",
    "\n",
    "y_vals = df[\"max_temperature\"]\n",
    "\n",
    "(slope, intercept, rvalue, pvalue, stderr) = stats.linregress(x_vals, y_vals)\n",
    "\n",
    "\n",
    "regress_values = x_vals * slope + intercept\n",
    "print(regress_values)\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x +\" + str(round(intercept,2))\n",
    "print(line_eq)\n",
    "plt.scatter(x_vals,y_vals)\n",
    "plt.plot(x_vals,regress_values,\"r-\")\n",
    "\n",
    "plt.xlabel('Latitude')\n",
    "plt.ylabel('Max Temperature')\n",
    "plt.annotate(line_eq,(20,15),fontsize=15,color=\"red\")\n",
    "\n",
    "print(f\"The r-value is: {rvalue**2}\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 0.03x +74.34\n",
      "The r-value is: 0.005608079167116695\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lat and Humidity Regression \n",
    "\n",
    "y_vals = df[\"humidity\"]\n",
    "(slope, intercept, rvalue, pvalue, stderr) = stats.linregress(x_vals, y_vals)\n",
    "regress_values = x_vals * slope + intercept\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x +\" + str(round(intercept,2))\n",
    "print(line_eq)\n",
    "plt.scatter(x_vals,y_vals)\n",
    "plt.plot(x_vals,regress_values,\"r-\")\n",
    "plt.xlabel('Latitude')\n",
    "plt.ylabel('Humidity')\n",
    "plt.annotate(line_eq,(20,15),fontsize=15,color=\"red\")\n",
    "print(f\"The r-value is: {rvalue**2}\")\n",
    "\n",
    "# Show plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 0.27x +43.91\n",
      "The r-value is: 0.06780918303913269\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lat and Cloudiness Regression \n",
    "\n",
    "y_vals = df[\"cloud_percentage\"]\n",
    "(slope, intercept, rvalue, pvalue, stderr) = stats.linregress(x_vals, y_vals)\n",
    "regress_values = x_vals * slope + intercept\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x +\" + str(round(intercept,2))\n",
    "print(line_eq)\n",
    "plt.scatter(x_vals,y_vals)\n",
    "plt.plot(x_vals,regress_values,\"r-\")\n",
    "plt.xlabel('Latitude')\n",
    "plt.ylabel('Cloudiness %')\n",
    "plt.annotate(line_eq,(20,15),fontsize=15,color=\"red\")\n",
    "print(f\"The r-value is: {rvalue**2}\")\n",
    "\n",
    "# Show plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 0.27x +43.91\n",
      "The r-value is: 0.06780918303913269\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lat and Wind Speed \n",
    "\n",
    "y_vals = df[\"cloud_percentage\"]\n",
    "(slope, intercept, rvalue, pvalue, stderr) = stats.linregress(x_vals, y_vals)\n",
    "regress_values = x_vals * slope + intercept\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x +\" + str(round(intercept,2))\n",
    "print(line_eq)\n",
    "plt.scatter(x_vals,y_vals)\n",
    "plt.plot(x_vals,regress_values,\"r-\")\n",
    "plt.xlabel('Latitude')\n",
    "plt.ylabel('Cloudiness %')\n",
    "plt.annotate(line_eq,(20,15),fontsize=15,color=\"red\")\n",
    "print(f\"The r-value is: {rvalue**2}\")\n",
    "\n",
    "# Show plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv(\"WeatherPy_data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
